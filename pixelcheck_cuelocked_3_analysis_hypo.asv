clear all

% Paths 
PATH_EEGLAB = '/home/plkn/eeglab2025.0.0/';
%PATH_TF_DATA = '/mnt/data_dump/pixelcheck/3_tf_data_cuelocked/';
PATH_TF_DATA = '/mnt/data_dump/pixelcheck/3_tf_data_cuelocked_1stout/';
PATH_TF_RESULTS = '/mnt/data_dump/pixelcheck/4_tf_results_cuelocked/';

% Init EEGlab
addpath(PATH_EEGLAB);
eeglab;

% Get list of files
file_list = dir(fullfile(PATH_TF_DATA, '*ersps.mat'));
  
% Exclude VP4 VP25
to_exclude = [4, 25];
idx_exclude = [];
for s = 1 : length(file_list)

    % Get id as string
    id_string = regexp(file_list(s).name, '\d+', 'match');
    
    if ismember(str2double(id_string{1}), to_exclude)
        idx_exclude(end + 1) = s;
    end
end
file_list(idx_exclude) = [];

% Get number of subjects
n_subjects = length(file_list);

% Load metadata
load([PATH_TF_DATA, 'chanlocs.mat']);
load([PATH_TF_DATA, 'tf_freqs.mat']);
load([PATH_TF_DATA, 'tf_times.mat']);

% Prune to cti
time_idx = tf_times >= -500 & tf_times <= 1800;
tf_times = tf_times(time_idx);

% Data matrix
all_ersps = zeros(n_subjects, 6, length(chanlocs), length(tf_freqs), length(tf_times));

% Loop subjects and load data
for s = 1 : n_subjects

    % Get id as string
    id_string = regexp(file_list(s).name, '\d+', 'match');
    id_string = id_string{1};

    % Load data
    load([PATH_TF_DATA, id_string, '_ersps.mat']); % cond x chan x freq x time

    % Prune to cti
    ersps = ersps(:, :, :, time_idx);

    % Collect
    all_ersps(s, :, :, :, :) = ersps;
   
end

% Posterior electrode patch
%idx_channel = [19, 20, 65, 15, 33, 34]; % frontal midline
idx_channel = [59, 60]; % sensory
idx_time = tf_times >= 1000 & tf_times <= 1500;
idx_freq = tf_freqs >= 8 & tf_freqs <= 12; % alpha

% Average across electrodes in patch
ersps_patch = squeeze(mean(all_ersps(:, :, idx_channel, :, :), 3));

% Calculate values
ersps_vals = squeeze(mean(ersps_patch(:, :, idx_freq, idx_time), [3, 4]));

% Calculate freqtraces in patch
freq_patch = squeeze(mean(ersps_patch(:, :, idx_freq, :), 3));

% Get topovals for conditions
topovals = squeeze(mean(all_ersps(:, :, :, idx_freq, idx_time), [1, 4, 5]));

% Plot freqtraces
figure()
pd = squeeze(mean(freq_patch, 1));
plot(tf_times, pd)
legend({'neulo', 'neuhi', 'slflo', 'slfhi', 'othlo', 'othhi'})

% Plot topo
figure()
subplot(3, 2, 1)
topoplot(topovals(1, :), chanlocs, 'maplimits', [-2, 2], 'electrodes', 'on', 'style', 'both', 'emarker2', {idx_channel, 'o', 'r', 3, 2});
title(['neu lo'])
subplot(3, 2, 2)
topoplot(topovals(2, :), chanlocs, 'maplimits', [-2, 2], 'electrodes', 'on', 'style', 'both', 'emarker2', {idx_channel, 'o', 'r', 3, 2});
title(['neu hi'])

subplot(3, 2, 3)
topoplot(topovals(3, :), chanlocs, 'maplimits', [-2, 2], 'electrodes', 'on', 'style', 'both', 'emarker2', {idx_channel, 'o', 'r', 3, 2});
title(['slf lo'])
subplot(3, 2, 4)
topoplot(topovals(4, :), chanlocs, 'maplimits', [-2, 2], 'electrodes', 'on', 'style', 'both', 'emarker2', {idx_channel, 'o', 'r', 3, 2});
title(['slf hi'])

subplot(3, 2, 5)
topoplot(topovals(5, :), chanlocs, 'maplimits', [-2, 2], 'electrodes', 'on', 'style', 'both', 'emarker2', {idx_channel, 'o', 'r', 3, 2});
title(['oth lo'])
subplot(3, 2, 6)
topoplot(topovals(6, :), chanlocs, 'maplimits', [-2, 2], 'electrodes', 'on', 'style', 'both', 'emarker2', {idx_channel, 'o', 'r', 3, 2});
title(['oth hi'])


% Plot tf for conditions
figure()

subplot(3, 2, 1)
pd = squeeze(mean(squeeze(ersps_patch(:, 1, :, :)), 1));
contourf(tf_times, tf_freqs, pd, 50, 'linecolor','none')
colormap('jet')
set(gca,'clim', [-2, 2], 'YScale', 'log', 'YTick', [4, 8, 12, 20])
colorbar;
title(['neu lo'])

subplot(3, 2, 2)
pd = squeeze(mean(squeeze(ersps_patch(:, 2, :, :)), 1));
contourf(tf_times, tf_freqs, pd, 50, 'linecolor','none')
colormap('jet')
set(gca,'clim', [-2, 2], 'YScale', 'log', 'YTick', [4, 8, 12, 20])
colorbar;
title(['neu hi'])

subplot(3, 2, 3)
pd = squeeze(mean(squeeze(ersps_patch(:, 3, :, :)), 1));
contourf(tf_times, tf_freqs, pd, 50, 'linecolor','none')
colormap('jet')
set(gca,'clim', [-2, 2], 'YScale', 'log', 'YTick', [4, 8, 12, 20])
colorbar;
title(['slf lo'])

subplot(3, 2, 4)
pd = squeeze(mean(squeeze(ersps_patch(:, 4, :, :)), 1));
contourf(tf_times, tf_freqs, pd, 50, 'linecolor','none')
colormap('jet')
set(gca,'clim', [-2, 2], 'YScale', 'log', 'YTick', [4, 8, 12, 20])
colorbar;
title(['slf hi'])

subplot(3, 2, 5)
pd = squeeze(mean(squeeze(ersps_patch(:, 5, :, :)), 1));
contourf(tf_times, tf_freqs, pd, 50, 'linecolor','none')
colormap('jet')
set(gca,'clim', [-2, 2], 'YScale', 'log', 'YTick', [4, 8, 12, 20])
colorbar;
title(['oth lo'])

subplot(3, 2, 6)
pd = squeeze(mean(squeeze(ersps_patch(:, 6, :, :)), 1));
contourf(tf_times, tf_freqs, pd, 50, 'linecolor','none')
colormap('jet')
set(gca,'clim', [-2, 2], 'YScale', 'log', 'YTick', [4, 8, 12, 20])
colorbar;
title(['oth hi'])


figure()
plot(mean(ersps_vals))


% Reshape into [subjects × feedback × reward]
% feedback = 3, reward = 2
data3d = zeros(n_subjects, 3, 2);

% Fill manually to match your order
data3d(:,1,1) = data(:,1); % neu-lo
data3d(:,1,2) = data(:,2); % neu-hi
data3d(:,2,1) = data(:,3); % slf-lo
data3d(:,2,2) = data(:,4); % slf-hi
data3d(:,3,1) = data(:,5); % oth-lo
data3d(:,3,2) = data(:,6); % oth-hi

% Compute means and standard deviations
means = squeeze(mean(data3d, 1));   % [feedback × reward]
sds   = squeeze(std(data3d, 0, 1)); % [feedback × reward]

% Feedback labels
feedback_labels = {'neu','slf','oth'};

% Colors for reward levels
colors = lines(2);  % MATLAB's default distinguishable colors

% Plot
figure; hold on;
for r = 1:2
    errorbar(1:3, means(:,r), sds(:,r), ...
        '-o', 'Color', colors(r,:), 'MarkerFaceColor', colors(r,:), ...
        'LineWidth', 1.5, 'CapSize', 8);
end

% Formatting
set(gca, 'XTick', 1:3, 'XTickLabel', feedback_labels, 'FontSize', 12);
xlabel('Feedback'); ylabel('Dependent variable');
legend({'Reward low','Reward high'}, 'Location','best');
title('Means ± SD across feedback and reward levels');
grid on;



% Put data into a table (needed for fitrm)
varNames = {'neu_lo','neu_hi','slf_lo','slf_hi','oth_lo','oth_hi'};
tbl = array2table(ersps_vals, 'VariableNames', varNames);

% Define within-subject factors
FactorA = [1 1 2 2 3 3]';   % 3 levels
FactorB = [1 2 1 2 1 2]';   % 2 levels
withinDesign = table(FactorA, FactorB, ...
    'VariableNames', {'feedback','reward'});

% Fit repeated measures model
rm = fitrm(tbl, 'neu_lo-oth_hi ~ 1', 'WithinDesign', withinDesign);

% Run repeated measures ANOVA
ranovatbl = ranova(rm, 'WithinModel', 'feedback*reward');

disp(ranovatbl)


%% Main effect of FEEDBACK (3 levels → 3 comparisons)
results_feedback = multcompare(rm, 'feedback', 'ComparisonType', 'lsd');
disp('=== Post hoc pairwise comparisons for FEEDBACK (main effect) ===')
disp(results_feedback)

%% Interaction: simple effects of FEEDBACK at each REWARD level
results_interaction = multcompare(rm, 'feedback', 'By', 'reward', 'ComparisonType', 'lsd');
disp('=== Simple effects of FEEDBACK within each REWARD level ===')
disp(results_interaction)

%% (Optional) Simple effects of REWARD at each FEEDBACK level
results_simpleReward = multcompare(rm, 'reward', 'By', 'feedback', 'ComparisonType', 'lsd');
disp('=== Simple effects of REWARD within each FEEDBACK level ===')
disp(results_simpleReward)